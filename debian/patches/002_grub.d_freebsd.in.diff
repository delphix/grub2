
This patch is unreadable because it's an overhaul of the whole file,
it is now derived from 10_linux.in.

Index: util/grub.d/10_freebsd.in
===================================================================
--- util/grub.d/10_freebsd.in	(revision 2546)
+++ util/grub.d/10_freebsd.in	(working copy)
@@ -1,7 +1,7 @@
 #! /bin/sh -e
 
 # grub-mkconfig helper script.
-# Copyright (C) 2008,2009  Free Software Foundation, Inc.
+# Copyright (C) 2006,2007,2008,2009  Free Software Foundation, Inc.
 #
 # GRUB is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -26,51 +26,77 @@
   *)		OS="FreeBSD" ;;
 esac
 
-if test -e /boot/device.hints ; then
-  devices=/boot/device.hints
-fi
-
-if test -e /boot/kernel/kernel ; then
-  kfreebsd=/boot/kernel/kernel
-fi
-if test -e /boot/kernel/kernel.gz ; then
-  kfreebsd=/boot/kernel/kernel.gz
-fi
-
-if [ "x$kfreebsd" != "x" ] ; then
-  echo "Found kernel of FreeBSD: $kfreebsd" >&2
-
-  kfreebsd_basename=`basename $kfreebsd`
-  kfreebsd_dirname=`dirname $kfreebsd`
-  kfreebsd_rel_dirname=`make_system_path_relative_to_its_root $kfreebsd_dirname`
-
-  if [ x"$devices" != "x" ] ; then
-    devices_basename=`basename $devices`
-    devices_dirname=`dirname $devices`
-    devices_rel_dirname=`make_system_path_relative_to_its_root $devices_dirname`
-  fi
-
-  case ${GRUB_FS} in
-    ufs1 | ufs2)	kfreebsd_fs=ufs ;;
-    *)			kfreebsd_fs=${GRUB_FS} ;;
-  esac
-
+kfreebsd_entry ()
+{
   cat << EOF
-menuentry "${OS}" {
+menuentry "$1" {
 EOF
   prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/"
   cat << EOF
-	freebsd			${kfreebsd_rel_dirname}/${kfreebsd_basename}
+	freebsd			${rel_dirname}/${basename}
 EOF
 
-  if [ x"$devices" != "x" ] ; then
+  if test -n "${devices}" ; then
     cat << EOF
 	freebsd_loadenv		${devices_rel_dirname}/${devices_basename}
 EOF
   fi
+
+  if test -n "${acpi_ko}" ; then
+    cat << EOF
+	freebsd_module_elf	${acpi_ko_rel_dirname}/${acpi_ko_basename}
+EOF
+  fi
+
   cat << EOF
 	set FreeBSD.vfs.root.mountfrom=${kfreebsd_fs}:${GRUB_DEVICE}
 	set FreeBSD.vfs.root.mountfrom.options=rw
 }
 EOF
-fi
+}
+
+list=`for i in /boot/kfreebsd-* /boot/kernel/kernel ; do
+        if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
+      done`
+
+while [ "x$list" != "x" ] ; do
+  kfreebsd=`version_find_latest $list`
+  echo "Found kernel of FreeBSD: $kfreebsd" >&2
+  basename=`basename $kfreebsd`
+  dirname=`dirname $kfreebsd`
+  rel_dirname=`make_system_path_relative_to_its_root $dirname`
+
+  if [ -f /boot/device.hints ] ; then
+    devices=/boot/device.hints
+    devices_basename=`basename $devices`
+    devices_dirname=`dirname $devices`
+    devices_rel_dirname=`make_system_path_relative_to_its_root $devices_dirname`
+  fi
+
+  case ${GRUB_FS} in
+    ufs1 | ufs2)        kfreebsd_fs=ufs ;;
+    *)                  kfreebsd_fs=${GRUB_FS} ;;
+  esac
+
+  version=`echo $basename | sed -e "s,^[^0-9]*-,,g;s/\.gz$//g"`
+  alt_version=`echo $version | sed -e "s,\.old$,,g"`
+
+  acpi_ko=
+  for i in "/lib/modules/${version}/acpi.ko" "/lib/modules/${alt_version}/acpi.ko" \
+      "/boot/kernel/acpi.ko"; do
+    if test -e "$i" ; then
+      acpi_ko="$i"
+      break
+    fi
+  done
+  if test -n "${acpi_ko}" ; then
+    echo "Found ACPI module: ${acpi_ko}" >&2
+    acpi_ko_basename=`basename ${acpi_ko}`
+    acpi_ko_dirname=`dirname ${acpi_ko}`
+    acpi_ko_rel_dirname=`make_system_path_relative_to_its_root $acpi_ko_dirname`
+  fi
+
+  kfreebsd_entry "${OS}, kFreeBSD ${version}"
+
+  list=`echo $list | tr ' ' '\n' | grep -vx $kfreebsd | tr '\n' ' '`
+done
