Ubuntu: https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/216178
Upstream: http://lists.gnu.org/archive/html/grub-devel/2009-09/msg00040.html
 and thread
Description: Add GRUB_DEFAULT=saved, as well as grub-set-default and
 grub-reboot utilities. Provides functionality essentially equivalent to
 GRUB Legacy's savedefault.

diff -Nur -x '*.orig' -x '*~' grub2/ChangeLog.savedefault grub2.new/ChangeLog.savedefault
--- grub2/ChangeLog.savedefault	1970-01-01 01:00:00.000000000 +0100
+++ grub2.new/ChangeLog.savedefault	2010-01-05 11:15:15.000000000 +0000
@@ -0,0 +1,80 @@
+2010-10-05  Jordan Uggla  <jordan.uggla@gmail.com>
+2010-10-05  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub-reboot.in: Make sure prev_saved_entry always gets a
+	non-empty value.
+
+2010-10-05  Jordan Uggla  <jordan.uggla@gmail.com>
+2010-10-05  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/00_header.in: Define a "savedefault" function for use
+	in menu entries.
+	* util/grub-mkconfig_lib.in (save_default_entry): Use it.
+
+2010-10-05  Jordan Uggla  <jordan.uggla@gmail.com>
+2010-10-05  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub-mkconfig_lib.in (save_default_entry): Only set
+	saved_entry if boot_once is unset.
+	* util/grub.d/00_header.in: Set boot_once to "true" if there was a
+	previous saved entry (i.e. grub-reboot).
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/30_os-prober.in: Call save_default_entry for hurd.
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/00_header.in: Use `set var=val' rather than plain
+	`var=val'.
+	* util/grub-mkconfig_lib.in (save_default_entry): Likewise.
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub-reboot.in: Fix --version output.
+	* util/grub-set-default.in: Likewise.
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/00_header.in: Silently ignore zero-sized environment
+	blocks.
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/00_header.in: Quote the value assigned to `default',
+	in case it contains spaces.
+
+2009-12-08  Colin Watson  <cjwatson@ubuntu.com>
+
+	* util/grub.d/30_os-prober.in: Fix merge error that moved a
+	`save_default_entry' call from the macosx case to the linux case.
+
+2009-10-25  Vladimir Serbinenko  <phcoder@gmail.com>
+2009-10-25  Colin Watson  <cjwatson@ubuntu.com>
+
+	* normal/menu.c (grub_menu_execute_entry): Save selected entry title
+	in `chosen' environment variable.
+	* normal/menu_text.c (get_entry_number): Check if the variable
+	matches the title of a menu entry.
+	(run_menu): Pass menu to get_entry_number.
+
+	* util/grub-reboot.in: New file.
+	* util/grub-set-default.in: New file.
+	* conf/common.rmk (grub-reboot): New utility.
+	(grub-set-default): New utility.
+
+	* util/grub-mkconfig_lib.in (save_default_entry): New function.
+	* util/grub.d/00_header.in: If GRUB_DEFAULT is `saved', set
+	default to `${saved_entry}'.  If `${prev_saved_entry}' is non-empty,
+	move it to `saved_entry' for the next boot.  Load environment on
+	initialisation.
+	* util/grub.d/10_kfreebsd.in: Call save_default_entry.
+	* util/grub.d/10_hurd.in: Likewise.
+	* util/grub.d/10_linux.in (linux_entry): Likewise.
+	* util/grub.d/10_windows.in: Likewise.
+	* util/grub.d/30_os-prober.in: Likewise.
+
+	* util/grub-install.in: Create environment block.
+	* util/i386/efi/grub-install.in: Likewise.
+	* util/ieee1275/grub-install.in: Likewise.
+	* util/sparc64/ieee1275/grub-install.in: Likewise.
diff -Nur -x '*.orig' -x '*~' grub2/conf/common.rmk grub2.new/conf/common.rmk
--- grub2/conf/common.rmk	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/conf/common.rmk	2010-01-05 11:31:09.000000000 +0000
@@ -185,6 +185,20 @@
 
 grub-mkconfig_DATA += util/grub.d/README
 
+# For grub-set-default.
+grub-set-default: util/grub-set-default.in config.status
+	./config.status --file=$@:$<
+	chmod +x $@
+sbin_SCRIPTS += grub-set-default
+CLEANFILES += grub-set-default
+
+# For grub-reboot.
+grub-reboot: util/grub-reboot.in config.status
+	./config.status --file=$@:$<
+	chmod +x $@
+sbin_SCRIPTS += grub-reboot
+CLEANFILES += grub-reboot
+
 # Filing systems.
 pkglib_MODULES += fshelp.mod fat.mod ufs1.mod ufs2.mod ext2.mod ntfs.mod \
 	ntfscomp.mod minix.mod hfs.mod jfs.mod iso9660.mod xfs.mod	\
diff -Nur -x '*.orig' -x '*~' grub2/normal/menu.c grub2.new/normal/menu.c
--- grub2/normal/menu.c	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/normal/menu.c	2010-01-05 11:31:09.000000000 +0000
@@ -137,6 +137,8 @@
       return;
     }
 
+  grub_env_set ("chosen", entry->title);
+
   grub_parser_execute ((char *) entry->sourcecode);
 
   if (grub_errno == GRUB_ERR_NONE && grub_loader_is_loaded ())
diff -Nur -x '*.orig' -x '*~' grub2/normal/menu_text.c grub2.new/normal/menu_text.c
--- grub2/normal/menu_text.c	2010-01-05 11:31:04.000000000 +0000
+++ grub2.new/normal/menu_text.c	2010-01-05 11:31:09.000000000 +0000
@@ -365,7 +365,7 @@
 
 /* Get the entry number from the variable NAME.  */
 static int
-get_entry_number (const char *name)
+get_entry_number (grub_menu_t menu, const char *name)
 {
   char *val;
   int entry;
@@ -378,6 +378,28 @@
 
   entry = (int) grub_strtoul (val, 0, 0);
 
+  if (grub_errno == GRUB_ERR_BAD_NUMBER)
+    {
+      /* See if the variable matches the title of a menu entry.  */
+      grub_menu_entry_t e = menu->entry_list;
+      int i;
+
+      grub_errno = GRUB_ERR_NONE;
+
+      for (i = 0; e; i++)
+	{
+	  if (grub_strcmp (e->title, val) == 0)
+	    {
+	      entry = i;
+	      break;
+	    }
+	  e = e->next;
+	}
+
+      if (! e)
+	entry = -1;
+    }
+
   if (grub_errno != GRUB_ERR_NONE)
     {
       grub_errno = GRUB_ERR_NONE;
@@ -427,7 +449,7 @@
 
   first = 0;
 
-  default_entry = get_entry_number ("default");
+  default_entry = get_entry_number (menu, "default");
 
   /* If DEFAULT_ENTRY is not within the menu entries, fall back to
      the first entry.  */
diff -Nur -x '*.orig' -x '*~' grub2/util/grub-install.in grub2.new/util/grub-install.in
--- grub2/util/grub-install.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/grub-install.in	2010-01-05 11:31:09.000000000 +0000
@@ -40,6 +40,7 @@
 fi
 grub_mkdevicemap=${sbindir}/`echo grub-mkdevicemap | sed ${transform}`
 grub_probe=${sbindir}/`echo grub-probe | sed ${transform}`
+grub_editenv=${bindir}/`echo grub-editenv | sed ${transform}`
 rootdir=
 grub_prefix=`echo /boot/grub | sed ${transform}`
 modules=
@@ -261,6 +262,10 @@
 # Write device to a variable so we don't have to traverse /dev every time.
 grub_device=`$grub_probe --target=device ${grubdir}`
 
+if ! test -f ${grubdir}/grubenv; then
+    $grub_editenv ${grubdir}/grubenv create
+fi
+
 # Create the core image. First, auto-detect the filesystem module.
 fs_module=`$grub_probe --target=fs --device ${grub_device}`
 if test "x$fs_module" = x -a "x$modules" = x; then
diff -Nur -x '*.orig' -x '*~' grub2/util/grub-mkconfig_lib.in grub2.new/util/grub-mkconfig_lib.in
--- grub2/util/grub-mkconfig_lib.in	2010-01-05 11:31:03.000000000 +0000
+++ grub2.new/util/grub-mkconfig_lib.in	2010-01-05 11:31:09.000000000 +0000
@@ -94,6 +94,15 @@
   echo ${drive}${relative_path}
 }
 
+save_default_entry ()
+{
+  if [ "x${GRUB_DEFAULT}" = "xsaved" ] ; then
+    cat << EOF
+savedefault
+EOF
+  fi
+}
+
 prepare_grub_to_access_device ()
 {
   device=$1
diff -Nur -x '*.orig' -x '*~' grub2/util/grub-reboot.in grub2.new/util/grub-reboot.in
--- grub2/util/grub-reboot.in	1970-01-01 01:00:00.000000000 +0100
+++ grub2.new/util/grub-reboot.in	2010-01-05 11:31:09.000000000 +0000
@@ -0,0 +1,108 @@
+#! /bin/sh
+#
+# Set a default boot entry for GRUB, for the next boot only.
+# Copyright (C) 2004,2009  Free Software Foundation, Inc.
+#
+# GRUB is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# GRUB is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+
+# Initialize some variables.
+transform="@program_transform_name@"
+
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+bindir=@bindir@
+
+grub_editenv=${bindir}/`echo grub-editenv | sed ${transform}`
+rootdir=
+
+# Usage: usage
+# Print the usage.
+usage () {
+    cat <<EOF
+Usage: $0 [OPTION] entry
+Set the default boot entry for GRUB, for the next boot only.
+
+  -h, --help              print this message and exit
+  -v, --version           print the version information and exit
+  --root-directory=DIR    expect GRUB images under the directory DIR
+                          instead of the root directory
+
+ENTRY is a number or a menu item title.
+
+Report bugs to <bug-grub@gnu.org>.
+EOF
+}
+
+# Check the arguments.
+for option in "$@"; do
+    case "$option" in
+    -h | --help)
+	usage
+	exit 0 ;;
+    -v | --version)
+	echo "grub-reboot (GNU GRUB ${PACKAGE_VERSION})"
+	exit 0 ;;
+    --root-directory=*)
+	rootdir=`echo "$option" | sed 's/--root-directory=//'` ;;
+    -*)
+	echo "Unrecognized option \`$option'" 1>&2
+	usage
+	exit 1
+	;;
+    *)
+	if test "x$entry" != x; then
+	    echo "More than one entry?" 1>&2
+	    usage
+	    exit 1
+	fi
+	entry="${option}" ;;
+    esac
+done
+
+if test "x$entry" = x; then
+    echo "entry not specified." 1>&2
+    usage
+    exit 1
+fi
+
+# Initialize these directories here, since ROOTDIR was initialized.
+case "$host_os" in
+netbsd* | openbsd*)
+    # Because /boot is used for the boot block in NetBSD and OpenBSD, use /grub
+    # instead of /boot/grub.
+    grub_prefix=`echo /grub | sed ${transform}`
+    bootdir=${rootdir}
+    ;;
+*)
+    # Use /boot/grub by default.
+    bootdir=${rootdir}/boot
+    ;;
+esac
+
+grubdir=${bootdir}/`echo grub | sed ${transform}`
+
+prev_saved_entry=`$grub_editenv ${grubdir}/grubenv list | sed -n 's/^saved_entry=//p'`
+if [ "$prev_saved_entry" ]; then
+    $grub_editenv ${grubdir}/grubenv set prev_saved_entry="$prev_saved_entry"
+else
+    # We need some non-empty value for prev_saved_entry so that GRUB will
+    # recognise that grub-reboot has been used and restore the previous
+    # saved entry. "0" is the same as an empty value, i.e. the first menu
+    # entry.
+    $grub_editenv ${grubdir}/grubenv set prev_saved_entry=0
+fi
+$grub_editenv ${grubdir}/grubenv set saved_entry="$entry"
+
+# Bye.
+exit 0
diff -Nur -x '*.orig' -x '*~' grub2/util/grub-set-default.in grub2.new/util/grub-set-default.in
--- grub2/util/grub-set-default.in	1970-01-01 01:00:00.000000000 +0100
+++ grub2.new/util/grub-set-default.in	2010-01-05 11:31:09.000000000 +0000
@@ -0,0 +1,99 @@
+#! /bin/sh
+#
+# Set a default boot entry for GRUB.
+# Copyright (C) 2004,2009  Free Software Foundation, Inc.
+#
+# GRUB is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# GRUB is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+
+# Initialize some variables.
+transform="@program_transform_name@"
+
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+bindir=@bindir@
+
+grub_editenv=${bindir}/`echo grub-editenv | sed ${transform}`
+rootdir=
+
+# Usage: usage
+# Print the usage.
+usage () {
+    cat <<EOF
+Usage: $0 [OPTION] entry
+Set the default boot entry for GRUB.
+
+  -h, --help              print this message and exit
+  -v, --version           print the version information and exit
+  --root-directory=DIR    expect GRUB images under the directory DIR
+                          instead of the root directory
+
+ENTRY is a number or a menu item title.
+
+Report bugs to <bug-grub@gnu.org>.
+EOF
+}
+
+# Check the arguments.
+for option in "$@"; do
+    case "$option" in
+    -h | --help)
+	usage
+	exit 0 ;;
+    -v | --version)
+	echo "grub-set-default (GNU GRUB ${PACKAGE_VERSION})"
+	exit 0 ;;
+    --root-directory=*)
+	rootdir=`echo "$option" | sed 's/--root-directory=//'` ;;
+    -*)
+	echo "Unrecognized option \`$option'" 1>&2
+	usage
+	exit 1
+	;;
+    *)
+	if test "x$entry" != x; then
+	    echo "More than one entry?" 1>&2
+	    usage
+	    exit 1
+	fi
+	entry="${option}" ;;
+    esac
+done
+
+if test "x$entry" = x; then
+    echo "entry not specified." 1>&2
+    usage
+    exit 1
+fi
+
+# Initialize these directories here, since ROOTDIR was initialized.
+case "$host_os" in
+netbsd* | openbsd*)
+    # Because /boot is used for the boot block in NetBSD and OpenBSD, use /grub
+    # instead of /boot/grub.
+    grub_prefix=`echo /grub | sed ${transform}`
+    bootdir=${rootdir}
+    ;;
+*)
+    # Use /boot/grub by default.
+    bootdir=${rootdir}/boot
+    ;;
+esac
+
+grubdir=${bootdir}/`echo grub | sed ${transform}`
+
+$grub_editenv ${grubdir}/grubenv unset prev_saved_entry
+$grub_editenv ${grubdir}/grubenv set saved_entry="$entry"
+
+# Bye.
+exit 0
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/00_header.in grub2.new/util/grub.d/00_header.in
--- grub2/util/grub.d/00_header.in	2010-01-05 11:31:03.000000000 +0000
+++ grub2.new/util/grub.d/00_header.in	2010-01-05 11:31:09.000000000 +0000
@@ -34,11 +34,29 @@
 done
 
 if [ "x${GRUB_DEFAULT}" = "x" ] ; then GRUB_DEFAULT=0 ; fi
+if [ "x${GRUB_DEFAULT}" = "xsaved" ] ; then GRUB_DEFAULT='${saved_entry}' ; fi
 if [ "x${GRUB_TIMEOUT}" = "x" ] ; then GRUB_TIMEOUT=5 ; fi
 if [ "x${GRUB_GFXMODE}" = "x" ] ; then GRUB_GFXMODE=640x480 ; fi
 
 cat << EOF
-set default=${GRUB_DEFAULT}
+if [ -s \$prefix/grubenv ]; then
+  load_env
+fi
+set default="${GRUB_DEFAULT}"
+if [ \${prev_saved_entry} ]; then
+  set saved_entry=\${prev_saved_entry}
+  save_env saved_entry
+  set prev_saved_entry=
+  save_env prev_saved_entry
+  set boot_once=true
+fi
+
+function savedefault {
+  if [ -z \${boot_once} ]; then
+    saved_entry=\${chosen}
+    save_env saved_entry
+  fi
+}
 EOF
 
 case ${GRUB_TERMINAL_INPUT}:${GRUB_TERMINAL_OUTPUT} in
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/10_hurd.in grub2.new/util/grub.d/10_hurd.in
--- grub2/util/grub.d/10_hurd.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/grub.d/10_hurd.in	2010-01-05 11:31:09.000000000 +0000
@@ -75,6 +75,7 @@
 cat << EOF
 	multiboot ${kernel} root=device:${GRUB_DEVICE#/dev/}
 EOF
+save_default_entry | sed -e "s/^/\t/"
 prepare_grub_to_access_device ${GRUB_DEVICE} | sed -e "s/^/\t/"
 cat << EOF
 	module /hurd/${hurd_fs}.static ${hurd_fs} --readonly \\
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/10_kfreebsd.in grub2.new/util/grub.d/10_kfreebsd.in
--- grub2/util/grub.d/10_kfreebsd.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/grub.d/10_kfreebsd.in	2010-01-05 11:31:09.000000000 +0000
@@ -39,6 +39,7 @@
   args="$4"	# not used yet
   title="$(gettext "%s, with kFreeBSD %s")"
   printf "menuentry \"${title}\" {\n" "${os}" "${version}"
+  save_default_entry | sed -e "s/^/\t/"
   if [ -z "${prepare_boot_cache}" ]; then
     prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"
   fi
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/10_linux.in grub2.new/util/grub.d/10_linux.in
--- grub2/util/grub.d/10_linux.in	2010-01-05 11:31:04.000000000 +0000
+++ grub2.new/util/grub.d/10_linux.in	2010-01-05 11:31:49.000000000 +0000
@@ -70,6 +70,7 @@
 	set quiet=1
 EOF
   fi
+  save_default_entry | sed -e "s/^/\t/"
   if [ -z "${prepare_boot_cache}" ]; then
     prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"
   fi
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/10_windows.in grub2.new/util/grub.d/10_windows.in
--- grub2/util/grub.d/10_windows.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/grub.d/10_windows.in	2010-01-05 11:31:09.000000000 +0000
@@ -73,6 +73,7 @@
 menuentry "$OS" {
 EOF
 
+  save_default_entry | sed -e 's,^,\t,'
   prepare_grub_to_access_device "$dev" | sed 's,^,\t,'
 
   cat << EOF
diff -Nur -x '*.orig' -x '*~' grub2/util/grub.d/30_os-prober.in grub2.new/util/grub.d/30_os-prober.in
--- grub2/util/grub.d/30_os-prober.in	2010-01-05 11:31:03.000000000 +0000
+++ grub2.new/util/grub.d/30_os-prober.in	2010-01-05 11:31:09.000000000 +0000
@@ -84,6 +84,7 @@
         cat << EOF
 menuentry "${LONGNAME} (${2}-bit) (on ${DEVICE})" {
 EOF
+	save_default_entry | sed -e "s/^/\t/"
 	prepare_grub_to_access_device ${DEVICE} | sed -e "s/^/\t/"
 	cat << EOF
         insmod ${GRUB_VIDEO_BACKEND}
@@ -149,6 +150,7 @@
       cat << EOF
 menuentry "${LONGNAME} (on ${DEVICE})" {
 EOF
+      save_default_entry | sed -e "s/^/\t/"
       prepare_grub_to_access_device ${DEVICE} | sed -e "s/^/\t/"
 
       case ${LONGNAME} in
@@ -190,6 +192,7 @@
         cat << EOF
 menuentry "${LLABEL} (on ${DEVICE})" {
 EOF
+	save_default_entry | sed -e "s/^/\t/"
 	if [ -z "${prepare_boot_cache}" ]; then
 	  prepare_boot_cache="$(prepare_grub_to_access_device ${LBOOT} | sed -e "s/^/\t/")"
 	fi
@@ -216,6 +219,7 @@
       cat << EOF
 menuentry "${LONGNAME} (on ${DEVICE})" {
 EOF
+      save_default_entry | sed -e "s/^/\t/"
       prepare_grub_to_access_device ${DEVICE} | sed -e "s/^/\t/"
       grub_device="`${grub_probe} --device ${DEVICE} --target=drive`"
       mach_device="`echo "${grub_device}" | tr -d '()' | tr , s`"
diff -Nur -x '*.orig' -x '*~' grub2/util/i386/efi/grub-install.in grub2.new/util/i386/efi/grub-install.in
--- grub2/util/i386/efi/grub-install.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/i386/efi/grub-install.in	2010-01-05 11:31:09.000000000 +0000
@@ -35,6 +35,7 @@
 grub_mkimage=${bindir}/`echo grub-mkimage | sed ${transform}`
 grub_mkdevicemap=${sbindir}/`echo grub-mkdevicemap | sed ${transform}`
 grub_probe=${sbindir}/`echo grub-probe | sed ${transform}`
+grub_editenv=${bindir}/`echo grub-editenv | sed ${transform}`
 rootdir=
 grub_prefix=`echo /boot/grub | sed ${transform}`
 modules=
@@ -179,6 +180,10 @@
     cp -f $file ${grubdir} || exit 1
 done
 
+if ! test -f ${grubdir}/grubenv; then
+    $grub_editenv ${grubdir}/grubenv create
+fi
+
 # Create the core image. First, auto-detect the filesystem module.
 fs_module=`$grub_probe --target=fs --device-map=${device_map} ${grubdir}`
 if test "x$fs_module" = xfat; then :; else
diff -Nur -x '*.orig' -x '*~' grub2/util/ieee1275/grub-install.in grub2.new/util/ieee1275/grub-install.in
--- grub2/util/ieee1275/grub-install.in	2010-01-05 11:30:49.000000000 +0000
+++ grub2.new/util/ieee1275/grub-install.in	2010-01-05 11:31:09.000000000 +0000
@@ -37,6 +37,7 @@
 grub_mkimage=${bindir}/`echo grub-mkelfimage | sed ${transform}`
 grub_mkdevicemap=${sbindir}/`echo grub-mkdevicemap | sed ${transform}`
 grub_probe=${sbindir}/`echo grub-probe | sed ${transform}`
+grub_editenv=${bindir}/`echo grub-editenv | sed ${transform}`
 rootdir=
 grub_prefix=`echo /boot/grub | sed ${transform}`
 modules=
@@ -163,6 +164,10 @@
     cp -f $file ${grubdir} || exit 1
 done
 
+if ! test -f ${grubdir}/grubenv; then
+    $grub_editenv ${grubdir}/grubenv create
+fi
+
 # Create the core image. First, auto-detect the filesystem module.
 fs_module=`$grub_probe --target=fs --device-map=${device_map} ${grubdir}`
 if test "x$fs_module" = x -a "x$modules" = x; then
